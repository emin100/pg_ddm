diff --git a/.gitignore b/.gitignore
index a0eb45e..c5c5352 100644
--- a/.gitignore
+++ b/.gitignore
@@ -27,3 +27,7 @@
 *.exe
 *.gz
 *.swp
+
+.project
+.cproject
+.settings
diff --git a/Makefile b/Makefile
index 8f572b0..faccd4d 100644
--- a/Makefile
+++ b/Makefile
@@ -1,9 +1,9 @@
 
 include config.mak
 
-bin_PROGRAMS = pgbouncer
+bin_PROGRAMS = pg_ddm
 
-pgbouncer_SOURCES = \
+pg_ddm_SOURCES = \
 	src/admin.c \
 	src/client.c \
 	src/dnslookup.c \
@@ -16,6 +16,8 @@ pgbouncer_SOURCES = \
 	src/pktbuf.c \
 	src/pooler.c \
 	src/proto.c \
+	src/rewrite_query.c \
+    src/rubycall.c \
 	src/sbuf.c \
 	src/scram.c \
 	src/server.c \
@@ -42,6 +44,8 @@ pgbouncer_SOURCES = \
 	include/pktbuf.h \
 	include/pooler.h \
 	include/proto.h \
+	include/rewrite_query.h \
+    include/rubycall.h \
 	include/sbuf.h \
 	include/scram.h \
 	include/server.h \
@@ -58,19 +62,18 @@ pgbouncer_SOURCES = \
 	include/common/unicode_norm.h \
 	include/common/unicode_norm_table.h
 
-pgbouncer_CPPFLAGS = -Iinclude $(CARES_CFLAGS) $(LIBEVENT_CFLAGS) $(TLS_CPPFLAGS)
-
+pg_ddm_CPPFLAGS = -Iinclude $(CARES_CFLAGS) $(LIBEVENT_CFLAGS) $(TLS_CPPFLAGS) $(shell pkg-config --cflags ruby)
 # include libusual sources directly
 AM_FEATURES = libusual
-pgbouncer_EMBED_LIBUSUAL = 1
+pg_ddm_EMBED_LIBUSUAL = 1
 
 # docs to install as-is
-dist_doc_DATA = README.md NEWS.md etc/pgbouncer.ini etc/userlist.txt
+dist_doc_DATA = README.md NEWS.md etc/pg_ddm.ini etc/userlist.txt
 
 DISTCLEANFILES = config.mak config.status lib/usual/config.h config.log
 
 DIST_SUBDIRS = doc test
-dist_man_MANS = doc/pgbouncer.1 doc/pgbouncer.5
+dist_man_MANS = doc/pg_ddm.1 doc/pg_ddm.5
 
 # files in tgz
 EXTRA_DIST = AUTHORS COPYRIGHT Makefile config.mak.in config.sub config.guess \
@@ -91,19 +94,19 @@ LIBUSUAL_DIST = $(filter-out %/config.h, $(sort $(wildcard \
 		lib/README lib/COPYRIGHT \
 		lib/find_modules.sh )))
 
-pgbouncer_LDFLAGS := $(TLS_LDFLAGS)
-pgbouncer_LDADD := $(CARES_LIBS) $(LIBEVENT_LIBS) $(TLS_LIBS) $(LIBS)
+pg_ddm_LDFLAGS := $(TLS_LDFLAGS)
+pg_ddm_LDADD := $(CARES_LIBS) $(LIBEVENT_LIBS) $(TLS_LIBS) $(LIBS) $(shell pkg-config --libs ruby)
 LIBS :=
 
 #
 # win32
 #
 
-EXTRA_pgbouncer_SOURCES = win32/win32support.c win32/win32support.h
+EXTRA_pg_ddm_SOURCES = win32/win32support.c win32/win32support.h
 EXTRA_PROGRAMS = pgbevent
 ifeq ($(PORTNAME),win32)
-pgbouncer_CPPFLAGS += -Iwin32
-pgbouncer_SOURCES += $(EXTRA_pgbouncer_SOURCES)
+pg_ddm_CPPFLAGS += -Iwin32
+pg_ddm_SOURCES += $(EXTRA_pg_ddm_SOURCES)
 bin_PROGRAMS += pgbevent
 endif
 
@@ -138,7 +141,7 @@ check: all
 w32zip = $(PACKAGE_TARNAME)-$(PACKAGE_VERSION)-windows-$(host_cpu).zip
 zip: $(w32zip)
 
-$(w32zip): pgbouncer.exe pgbevent.dll etc/pgbouncer.ini etc/userlist.txt README.md COPYRIGHT
+$(w32zip): pg_ddm.exe pgbevent.dll etc/pg_ddm.ini etc/userlist.txt README.md COPYRIGHT
 	rm -rf $(basename $@)
 	mkdir $(basename $@)
 	cp $^ $(basename $@)
@@ -156,5 +159,5 @@ htmls:
 		mkdir -p html && $(PANDOC) $$f -o html/`basename $$f`.html; \
 	done
 
-doc/pgbouncer.1 doc/pgbouncer.5:
+doc/pg_ddm.1 doc/pg_ddm.5:
 	$(MAKE) -C doc
diff --git a/configure.ac b/configure.ac
index 197079f..0472870 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,9 +1,9 @@
 dnl Process this file with autoconf to produce a configure script.
 
-AC_INIT([PgBouncer],
-        [1.14.0],
-        [https://github.com/pgbouncer/pgbouncer/issues], [],
-        [https://www.pgbouncer.org/])
+AC_INIT([Pg_Ddm],
+        [1.14.0.2],
+        [https://github.com/emin100/pg_ddm/issues], [],
+        [https://emin100.github.io/pg_ddm/])
 AC_CONFIG_SRCDIR(src/janitor.c)
 AC_CONFIG_HEADERS([lib/usual/config.h])
 AC_PREREQ([2.59])
diff --git a/doc/Makefile b/doc/Makefile
index cc1d6ad..9cc8f54 100644
--- a/doc/Makefile
+++ b/doc/Makefile
@@ -1,6 +1,6 @@
 -include ../config.mak
 
-manpages = pgbouncer.1 pgbouncer.5
+manpages = pg_ddm.1 pg_ddm.5
 
 dist_man_MANS = $(manpages)
 
@@ -8,7 +8,7 @@ EXTRA_DIST = config.md usage.md Makefile $(manpages) \
 	     frag-config-man.md frag-usage-man.md \
 	     filter.py
 
-CLEANFILES = pgbouncer_1.md pgbouncer_5.md
+CLEANFILES = pg_ddm_1.md pg_ddm_5.md
 
 # make maintainer-clean removes those
 MAINTAINERCLEANFILES = $(manpages)
@@ -19,16 +19,16 @@ include $(abs_top_srcdir)/lib/mk/antimake.mk
 
 export PACKAGE_VERSION
 
-pgbouncer.%: pgbouncer_%.md
+pg_ddm.%: pg_ddm_%.md
 	$(PANDOC) -s -t man -o $@ $<
 
-pgbouncer_1.md: filter.py frag-usage-man.md usage.md
+pg_ddm_1.md: filter.py frag-usage-man.md usage.md
 	$(PYTHON) $^ >$@
 
-pgbouncer_5.md: filter.py frag-config-man.md config.md
+pg_ddm_5.md: filter.py frag-config-man.md config.md
 	$(PYTHON) $^ >$@
 
-.INTERMEDIATE: pgbouncer_1.md pgbouncer_5.md
+.INTERMEDIATE: pg_ddm_1.md pg_ddm_5.md
 
 web:
-	$(MAKE) -C ../../pgbouncer.github.io
+	$(MAKE) -C ../../emin100.github.io
diff --git a/include/bouncer.h b/include/bouncer.h
index c615322..5f8701a 100644
--- a/include/bouncer.h
+++ b/include/bouncer.h
@@ -103,6 +103,8 @@ typedef struct ScramState ScramState;
 
 extern int cf_sbuf_len;
 
+#include "rubycall.h"
+#include "rewrite_query.h"
 #include "util.h"
 #include "iobuf.h"
 #include "sbuf.h"
@@ -358,6 +360,11 @@ struct PgDatabase {
 	int connection_count;	/* total connections for this database in all pools */
 
 	struct AATree user_tree;	/* users that have been queried on this database */
+
+	char *role;
+    char *root;
+    int route;
+    char *search_path;
 };
 
 
@@ -545,6 +552,16 @@ extern char *cf_server_tls_ca_file;
 extern char *cf_server_tls_cert_file;
 extern char *cf_server_tls_key_file;
 extern char *cf_server_tls_ciphers;
+extern char *cf_etcd_host;
+extern char *cf_etcd_port;
+extern char *cf_etcd_user;
+extern char *cf_etcd_passwd;
+extern char *cf_user_regex;
+extern char *cf_tag_regex;
+extern char *cf_tag_users;
+extern int cf_pg_ddm_enabled;
+extern int cf_pg_ddm_ini_route;
+extern int cf_pg_ddm_rewrite_route;
 
 extern const struct CfLookup pool_mode_map[];
 
diff --git a/include/objects.h b/include/objects.h
index b8c2d2f..b8d722e 100644
--- a/include/objects.h
+++ b/include/objects.h
@@ -30,6 +30,7 @@ extern struct Slab *user_cache;
 extern struct Slab *iobuf_cache;
 
 PgDatabase *find_database(const char *name);
+PgDatabase *find_routing_database(const char *name, const char *type, int server_number);
 PgUser *find_user(const char *name);
 PgPool *get_pool(PgDatabase *, PgUser *);
 PgSocket *compare_connections_by_time(PgSocket *lhs, PgSocket *rhs);
diff --git a/src/client.c b/src/client.c
index 56cb16a..8f012bf 100644
--- a/src/client.c
+++ b/src/client.c
@@ -61,6 +61,7 @@ static bool check_client_passwd(PgSocket *client, const char *passwd)
 		default:
 			return false;
 		}
+		break;
 	case AUTH_MD5:
 		if (strlen(passwd) != MD5_PASSWD_LEN)
 			return false;
@@ -534,11 +535,13 @@ static bool decide_startup_pool(PgSocket *client, PktHdr *pkt)
 		} else if (strcmp(key, "application_name") == 0) {
 			set_appname(client, val);
 			appname_found = true;
-		} else if (varcache_set(&client->vars, key, val)) {
-			slog_debug(client, "got var: %s=%s", key, val);
+		/*} else if (varcache_set(&client->vars, key, val)) {
+			slog_debug(client, "got var: %s=%s", key, val);*/
 		} else if (strlist_contains(cf_ignore_startup_params, key)) {
 			slog_debug(client, "ignoring startup parameter: %s=%s", key, val);
-		} else {
+		} else if (varcache_set(&client->vars, key, val)) {
+        	slog_debug(client, "got var: %s=%s", key, val);
+        } else {
 			slog_warning(client, "unsupported startup parameter: %s=%s", key, val);
 			disconnect_client(client, true, "unsupported startup parameter: %s", key);
 			return false;
@@ -938,6 +941,12 @@ static bool handle_client_work(PgSocket *client, PktHdr *pkt)
 	if (client->pool->db->admin)
 		return admin_handle_client(client, pkt);
 
+	if (pkt->type == 'Q' || pkt->type == 'P') {
+		 if (!rewrite_query(client, pkt)) {
+			return false;
+		}
+	}
+
 	/* acquire server */
 	if (!find_server(client))
 		return false;
diff --git a/src/loader.c b/src/loader.c
index bc6da76..f137f23 100644
--- a/src/loader.c
+++ b/src/loader.c
@@ -195,6 +195,10 @@ bool parse_database(void *base, const char *name, const char *connstr)
 	char *timezone = NULL;
 	char *connect_query = NULL;
 	char *appname = NULL;
+	char *root = NULL;
+	char *role = "master";
+	int route = 0;
+	char *search_path = "public";
 
 	int v_port;
 
@@ -222,6 +226,14 @@ bool parse_database(void *base, const char *name, const char *connstr)
 
 		if (strcmp("dbname", key) == 0) {
 			dbname = val;
+		} else if (strcmp("root", key) == 0) {
+			root = val;
+		} else if (strcmp("role", key) == 0) {
+			role = val;
+		} else if (strcmp("route", key) == 0) {
+            route = atoi(val);
+        }  else if (strcmp("search_path", key) == 0) {
+            search_path = val;
 		} else if (strcmp("host", key) == 0) {
 			host = val;
 		} else if (strcmp("port", key) == 0) {
@@ -284,6 +296,20 @@ bool parse_database(void *base, const char *name, const char *connstr)
 		}
 	}
 
+	if(root){
+		db->root = strdup(root);
+	}
+
+	if(role){
+		db->role = strdup(role);
+	}
+
+	if(search_path){
+		db->search_path = strdup(search_path);
+	}
+
+	db->route = route;
+
 	/* tag the db as alive */
 	db->db_dead = 0;
 	/* assuming not an autodb */
diff --git a/src/main.c b/src/main.c
index 8eb1c4c..29b8ffc 100644
--- a/src/main.c
+++ b/src/main.c
@@ -34,7 +34,7 @@
 
 static void usage(const char *exe)
 {
-	printf("%s is a connection pooler for PostgreSQL.\n\n", exe);
+	printf("%s is a dynamic data masker and connection pooler for PostgreSQL.\n\n", exe);
 	printf("Usage:\n");
 	printf("  %s [OPTION]... CONFIG_FILE\n", exe);
 	printf("\nOptions:\n");
@@ -175,6 +175,16 @@ char *cf_server_tls_ca_file;
 char *cf_server_tls_cert_file;
 char *cf_server_tls_key_file;
 char *cf_server_tls_ciphers;
+char *cf_etcd_host;
+char *cf_etcd_port;
+char *cf_etcd_user;
+char *cf_etcd_passwd;
+char *cf_user_regex;
+char *cf_tag_regex;
+char *cf_tag_users;
+int cf_pg_ddm_enabled;
+int cf_pg_ddm_ini_route;
+int cf_pg_ddm_rewrite_route;
 
 /*
  * config file description
@@ -283,6 +293,17 @@ CF_ABS("server_tls_ciphers", CF_STR, cf_server_tls_ciphers, CF_NO_RELOAD, "fast"
 CF_ABS("server_tls_key_file", CF_STR, cf_server_tls_key_file, CF_NO_RELOAD, ""),
 CF_ABS("server_tls_protocols", CF_STR, cf_server_tls_protocols, CF_NO_RELOAD, "secure"),
 CF_ABS("server_tls_sslmode", CF_LOOKUP(sslmode_map), cf_server_tls_sslmode, CF_NO_RELOAD, "disable"),
+CF_ABS("etcd_host", CF_STR, cf_etcd_host, CF_NO_RELOAD, ""),
+CF_ABS("etcd_port", CF_STR, cf_etcd_port, CF_NO_RELOAD, ""),
+CF_ABS("etcd_user", CF_STR, cf_etcd_user, CF_NO_RELOAD, ""),
+CF_ABS("etcd_passwd", CF_STR, cf_etcd_passwd, CF_NO_RELOAD, ""),
+CF_ABS("user_regex", CF_STR, cf_user_regex, CF_NO_RELOAD, ""),
+CF_ABS("tag_regex", CF_STR, cf_tag_regex, CF_NO_RELOAD, ""),
+CF_ABS("tag_users", CF_STR, cf_tag_users, CF_NO_RELOAD, ""),
+CF_ABS("pg_ddm_enabled", CF_INT, cf_pg_ddm_enabled, CF_NO_RELOAD, "1"),
+CF_ABS("pg_ddm_ini_route", CF_INT, cf_pg_ddm_ini_route, CF_NO_RELOAD, "0"),
+CF_ABS("pg_ddm_rewrite_route", CF_INT, cf_pg_ddm_rewrite_route, CF_NO_RELOAD, "0"),
+
 #ifdef WIN32
 CF_ABS("service_name", CF_STR, cf_jobname, CF_NO_RELOAD, NULL), /* alias for job_name */
 #endif
@@ -828,6 +849,13 @@ static void cleanup(void)
 	xfree(&cf_client_tls_cert_file);
 	xfree(&cf_client_tls_key_file);
 	xfree(&cf_client_tls_ciphers);
+    xfree(&cf_etcd_host);
+    xfree(&cf_etcd_port);
+    xfree(&cf_etcd_user);
+    xfree(&cf_etcd_passwd);
+    xfree(&cf_user_regex);
+    xfree(&cf_tag_regex);
+    xfree(&cf_tag_users);
 	xfree(&cf_client_tls_dheparams);
 	xfree(&cf_client_tls_ecdhecurve);
 	xfree(&cf_server_tls_protocols);
diff --git a/src/objects.c b/src/objects.c
index ebca82f..d89303d 100644
--- a/src/objects.c
+++ b/src/objects.c
@@ -487,6 +487,29 @@ PgDatabase *find_database(const char *name)
 	return NULL;
 }
 
+/* select routing database */
+PgDatabase *find_routing_database(const char *name, const char *type, int server_number)
+{
+	struct List *item;
+	int count = 1;
+	int number = 0;
+	PgDatabase *db;
+	statlist_for_each(item, &database_list) {
+		db = container_of(item, PgDatabase, head);
+		if (db->root != NULL && strcmp(db->root, name) == 0 && (strcmp(db->role, type) == 0 || strcmp("read", type) == 0)) {
+			if (server_number > 0 && count == server_number) {
+				log_debug("Selected Database: %s", db->name);
+				return db;
+			}
+			count = count + 1;
+		}
+	}
+	number = rand();
+	if(count > 1)
+		return find_routing_database(name, type, number % count);
+	return NULL;
+}
+
 /* find existing user */
 PgUser *find_user(const char *name)
 {
@@ -596,6 +619,11 @@ bool check_fast_fail(PgSocket *client)
 	int cnt;
 	PgPool *pool = client->pool;
 
+	if ( !pool ) {
+	    disconnect_client(client, true, "login rejected");
+	    return false;
+	}
+
 	/* If last login succeeded, client can go ahead. */
 	if (!pool->last_login_failed)
 		return true;
